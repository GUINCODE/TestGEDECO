// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models.Db;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("backend.Models.AdresseEntreprise", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CondePostale")
                        .HasColumnType("int");

                    b.Property<int?>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.ToTable("AdresseEntreprise");
                });

            modelBuilder.Entity("backend.Models.BudgetEotp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Annee")
                        .HasColumnType("int");

                    b.Property<double?>("BudgetInitiale")
                        .HasColumnType("float");

                    b.Property<double?>("BudgetPrevisionnel")
                        .HasColumnType("float");

                    b.Property<double?>("Budgetrevise1")
                        .HasColumnType("float");

                    b.Property<double?>("Budgetrevise2")
                        .HasColumnType("float");

                    b.Property<double?>("Budgetrevise3")
                        .HasColumnType("float");

                    b.Property<int?>("EotpId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EotpId");

                    b.ToTable("BudgetEotp");
                });

            modelBuilder.Entity("backend.Models.Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AcheteurId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MontantAnnuelEstimer")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontantTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NomCourt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NombreMois")
                        .HasColumnType("int");

                    b.Property<string>("NumCommnade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SeuilEMOS_Specifique")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StatutCommandeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcheteurId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("StatutCommandeId");

                    b.ToTable("Commande");
                });

            modelBuilder.Entity("backend.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("MailPro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephonePro")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("backend.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("AttachmentId")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("CommandeId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("backend.Models.Droit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Droit");
                });

            modelBuilder.Entity("backend.Models.Emos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Avancement")
                        .HasColumnType("float");

                    b.Property<int?>("CommandeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreerParId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEmisEM")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EotpId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvancement")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmisEM")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHorsForfait")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorkflowSuccessuful")
                        .HasColumnType("bit");

                    b.Property<double>("Montant")
                        .HasColumnType("float");

                    b.Property<double>("MontantInitiale")
                        .HasColumnType("float");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<int?>("TypeEmosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("CreerParId");

                    b.HasIndex("EotpId");

                    b.HasIndex("TypeEmosId");

                    b.ToTable("Emos");
                });

            modelBuilder.Entity("backend.Models.Entreprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Siren")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Entreprise");
                });

            modelBuilder.Entity("backend.Models.Eotp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdreId");

                    b.ToTable("Eotp");
                });

            modelBuilder.Entity("backend.Models.FicheIntervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CommandeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDevis")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFinTravaux")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DemandeurId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmosId")
                        .HasColumnType("int");

                    b.Property<int?>("EotpId")
                        .HasColumnType("int");

                    b.Property<string>("Installation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Montant")
                        .HasColumnType("float");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdreId")
                        .HasColumnType("int");

                    b.Property<string>("Regularisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusFiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("DemandeurId");

                    b.HasIndex("EmosId");

                    b.HasIndex("EotpId");

                    b.HasIndex("OrdreId");

                    b.HasIndex("StatusFiId");

                    b.ToTable("FicheIntervention");
                });

            modelBuilder.Entity("backend.Models.Habilitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Personnelid")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UniteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Personnelid");

                    b.HasIndex("RoleId");

                    b.HasIndex("UniteId");

                    b.ToTable("Habilitation");
                });

            modelBuilder.Entity("backend.Models.ManyToMany.CommandePoste", b =>
                {
                    b.Property<int?>("CommandeId")
                        .HasColumnType("int");

                    b.Property<int?>("PosteId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("CommandeId", "PosteId");

                    b.HasIndex("PosteId");

                    b.ToTable("CommandePoste");
                });

            modelBuilder.Entity("backend.Models.ManyToMany.RoleDroit", b =>
                {
                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("DroitId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("RoleId", "DroitId");

                    b.HasIndex("DroitId");

                    b.ToTable("RoleDroit");
                });

            modelBuilder.Entity("backend.Models.Ordre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Chrono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommandeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.ToTable("Ordre");
                });

            modelBuilder.Entity("backend.Models.Personnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponsableId")
                        .HasColumnType("int");

                    b.Property<string>("UltimusResp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResponsableId");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("backend.Models.Poste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("EmosId")
                        .HasColumnType("int");

                    b.Property<int?>("EotpId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCloture")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForfait")
                        .HasColumnType("bit");

                    b.Property<double>("MontantEngage")
                        .HasColumnType("float");

                    b.Property<double>("MontantInitiale")
                        .HasColumnType("float");

                    b.Property<double>("MontantRestant")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmosId");

                    b.HasIndex("EotpId");

                    b.ToTable("Poste");
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("backend.Models.StatutCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatutCommande");
                });

            modelBuilder.Entity("backend.Models.StatutFi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatutFi");
                });

            modelBuilder.Entity("backend.Models.TypeEmos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdreId");

                    b.ToTable("TypeEmos");
                });

            modelBuilder.Entity("backend.Models.TypeValidationEmos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeValidationEmos");
                });

            modelBuilder.Entity("backend.Models.TypeValidationFi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeValidationFi");
                });

            modelBuilder.Entity("backend.Models.Unite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bureau")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CodePostale")
                        .HasColumnType("int");

                    b.Property<string>("Departement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direction")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActif")
                        .HasColumnType("bit");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Service")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Ville")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Unite");
                });

            modelBuilder.Entity("backend.Models.ValidationEmos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmosId")
                        .HasColumnType("int");

                    b.Property<int?>("StatutFiId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeValidationEmosId")
                        .HasColumnType("int");

                    b.Property<int?>("ValideurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmosId");

                    b.HasIndex("StatutFiId");

                    b.HasIndex("TypeValidationEmosId");

                    b.HasIndex("ValideurId");

                    b.ToTable("ValidationEmos");
                });

            modelBuilder.Entity("backend.Models.ValidationFi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FicheInterventionId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeValidationId")
                        .HasColumnType("int");

                    b.Property<int?>("ValideurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FicheInterventionId");

                    b.HasIndex("TypeValidationId");

                    b.HasIndex("ValideurId");

                    b.ToTable("ValidationFi");
                });

            modelBuilder.Entity("backend.Models.AdresseEntreprise", b =>
                {
                    b.HasOne("backend.Models.Entreprise", "Entreprise")
                        .WithMany("Adresses")
                        .HasForeignKey("EntrepriseId");

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("backend.Models.BudgetEotp", b =>
                {
                    b.HasOne("backend.Models.Eotp", "Eotp")
                        .WithMany("Budgets")
                        .HasForeignKey("EotpId");

                    b.Navigation("Eotp");
                });

            modelBuilder.Entity("backend.Models.Commande", b =>
                {
                    b.HasOne("backend.Models.Personnel", "Acheteur")
                        .WithMany("Commandes")
                        .HasForeignKey("AcheteurId");

                    b.HasOne("backend.Models.Entreprise", "Entreprise")
                        .WithMany("Commandes")
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("backend.Models.StatutCommande", "StatutCommande")
                        .WithMany("Commandes")
                        .HasForeignKey("StatutCommandeId");

                    b.Navigation("Acheteur");

                    b.Navigation("Entreprise");

                    b.Navigation("StatutCommande");
                });

            modelBuilder.Entity("backend.Models.Contact", b =>
                {
                    b.HasOne("backend.Models.Entreprise", "Entreprise")
                        .WithMany("Contacts")
                        .HasForeignKey("EntrepriseId");

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("backend.Models.Document", b =>
                {
                    b.HasOne("backend.Models.Commande", "Commande")
                        .WithMany("Documents")
                        .HasForeignKey("CommandeId");

                    b.Navigation("Commande");
                });

            modelBuilder.Entity("backend.Models.Emos", b =>
                {
                    b.HasOne("backend.Models.Commande", "Commande")
                        .WithMany("Emos")
                        .HasForeignKey("CommandeId");

                    b.HasOne("backend.Models.Personnel", "CreerPar")
                        .WithMany("Emos")
                        .HasForeignKey("CreerParId");

                    b.HasOne("backend.Models.Eotp", "Eotp")
                        .WithMany()
                        .HasForeignKey("EotpId");

                    b.HasOne("backend.Models.TypeEmos", "TypeEmos")
                        .WithMany("Emos")
                        .HasForeignKey("TypeEmosId");

                    b.Navigation("Commande");

                    b.Navigation("CreerPar");

                    b.Navigation("Eotp");

                    b.Navigation("TypeEmos");
                });

            modelBuilder.Entity("backend.Models.Eotp", b =>
                {
                    b.HasOne("backend.Models.Ordre", "Ordre")
                        .WithMany("Eotps")
                        .HasForeignKey("OrdreId");

                    b.Navigation("Ordre");
                });

            modelBuilder.Entity("backend.Models.FicheIntervention", b =>
                {
                    b.HasOne("backend.Models.Commande", "Commande")
                        .WithMany("FicheInterventions")
                        .HasForeignKey("CommandeId");

                    b.HasOne("backend.Models.Personnel", "Demandeur")
                        .WithMany("FicheInterventions")
                        .HasForeignKey("DemandeurId");

                    b.HasOne("backend.Models.Emos", "Emos")
                        .WithMany("FicheInterventions")
                        .HasForeignKey("EmosId");

                    b.HasOne("backend.Models.Eotp", "Eotp")
                        .WithMany("FicheInterventions")
                        .HasForeignKey("EotpId");

                    b.HasOne("backend.Models.Ordre", "Ordre")
                        .WithMany()
                        .HasForeignKey("OrdreId");

                    b.HasOne("backend.Models.StatutFi", "StatusFi")
                        .WithMany()
                        .HasForeignKey("StatusFiId");

                    b.Navigation("Commande");

                    b.Navigation("Demandeur");

                    b.Navigation("Emos");

                    b.Navigation("Eotp");

                    b.Navigation("Ordre");

                    b.Navigation("StatusFi");
                });

            modelBuilder.Entity("backend.Models.Habilitation", b =>
                {
                    b.HasOne("backend.Models.Personnel", "Personnel")
                        .WithMany("Habilitations")
                        .HasForeignKey("Personnelid");

                    b.HasOne("backend.Models.Role", "Role")
                        .WithMany("Habilitations")
                        .HasForeignKey("RoleId");

                    b.HasOne("backend.Models.Unite", "Unite")
                        .WithMany("Habilitations")
                        .HasForeignKey("UniteId");

                    b.Navigation("Personnel");

                    b.Navigation("Role");

                    b.Navigation("Unite");
                });

            modelBuilder.Entity("backend.Models.ManyToMany.CommandePoste", b =>
                {
                    b.HasOne("backend.Models.Commande", "Commande")
                        .WithMany("CommandePostes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Poste", "Poste")
                        .WithMany("CommandePostes")
                        .HasForeignKey("PosteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Poste");
                });

            modelBuilder.Entity("backend.Models.ManyToMany.RoleDroit", b =>
                {
                    b.HasOne("backend.Models.Droit", "Droit")
                        .WithMany("RoleDroits")
                        .HasForeignKey("DroitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Role", "Role")
                        .WithMany("RoleDroits")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Droit");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("backend.Models.Ordre", b =>
                {
                    b.HasOne("backend.Models.Commande", "Commande")
                        .WithMany("Ordres")
                        .HasForeignKey("CommandeId");

                    b.Navigation("Commande");
                });

            modelBuilder.Entity("backend.Models.Personnel", b =>
                {
                    b.HasOne("backend.Models.Personnel", "Responsable")
                        .WithMany()
                        .HasForeignKey("ResponsableId");

                    b.Navigation("Responsable");
                });

            modelBuilder.Entity("backend.Models.Poste", b =>
                {
                    b.HasOne("backend.Models.Emos", "Emos")
                        .WithMany("Postes")
                        .HasForeignKey("EmosId");

                    b.HasOne("backend.Models.Eotp", "Eotp")
                        .WithMany("Postes")
                        .HasForeignKey("EotpId");

                    b.Navigation("Emos");

                    b.Navigation("Eotp");
                });

            modelBuilder.Entity("backend.Models.TypeEmos", b =>
                {
                    b.HasOne("backend.Models.Ordre", "Ordre")
                        .WithMany()
                        .HasForeignKey("OrdreId");

                    b.Navigation("Ordre");
                });

            modelBuilder.Entity("backend.Models.ValidationEmos", b =>
                {
                    b.HasOne("backend.Models.Emos", "Emos")
                        .WithMany("ValidationEmos")
                        .HasForeignKey("EmosId");

                    b.HasOne("backend.Models.StatutFi", null)
                        .WithMany("ValidationEmos")
                        .HasForeignKey("StatutFiId");

                    b.HasOne("backend.Models.TypeValidationEmos", "TypeValidationEmos")
                        .WithMany("ValidationEmos")
                        .HasForeignKey("TypeValidationEmosId");

                    b.HasOne("backend.Models.Personnel", "Valideur")
                        .WithMany("ValidationEmos")
                        .HasForeignKey("ValideurId");

                    b.Navigation("Emos");

                    b.Navigation("TypeValidationEmos");

                    b.Navigation("Valideur");
                });

            modelBuilder.Entity("backend.Models.ValidationFi", b =>
                {
                    b.HasOne("backend.Models.FicheIntervention", "FicheIntervention")
                        .WithMany("ValidationFis")
                        .HasForeignKey("FicheInterventionId");

                    b.HasOne("backend.Models.TypeValidationFi", "TypeValidation")
                        .WithMany("ValidationFis")
                        .HasForeignKey("TypeValidationId");

                    b.HasOne("backend.Models.Personnel", "Valideur")
                        .WithMany("ValidationFis")
                        .HasForeignKey("ValideurId");

                    b.Navigation("FicheIntervention");

                    b.Navigation("TypeValidation");

                    b.Navigation("Valideur");
                });

            modelBuilder.Entity("backend.Models.Commande", b =>
                {
                    b.Navigation("CommandePostes");

                    b.Navigation("Documents");

                    b.Navigation("Emos");

                    b.Navigation("FicheInterventions");

                    b.Navigation("Ordres");
                });

            modelBuilder.Entity("backend.Models.Droit", b =>
                {
                    b.Navigation("RoleDroits");
                });

            modelBuilder.Entity("backend.Models.Emos", b =>
                {
                    b.Navigation("FicheInterventions");

                    b.Navigation("Postes");

                    b.Navigation("ValidationEmos");
                });

            modelBuilder.Entity("backend.Models.Entreprise", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Commandes");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("backend.Models.Eotp", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("FicheInterventions");

                    b.Navigation("Postes");
                });

            modelBuilder.Entity("backend.Models.FicheIntervention", b =>
                {
                    b.Navigation("ValidationFis");
                });

            modelBuilder.Entity("backend.Models.Ordre", b =>
                {
                    b.Navigation("Eotps");
                });

            modelBuilder.Entity("backend.Models.Personnel", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Emos");

                    b.Navigation("FicheInterventions");

                    b.Navigation("Habilitations");

                    b.Navigation("ValidationEmos");

                    b.Navigation("ValidationFis");
                });

            modelBuilder.Entity("backend.Models.Poste", b =>
                {
                    b.Navigation("CommandePostes");
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Navigation("Habilitations");

                    b.Navigation("RoleDroits");
                });

            modelBuilder.Entity("backend.Models.StatutCommande", b =>
                {
                    b.Navigation("Commandes");
                });

            modelBuilder.Entity("backend.Models.StatutFi", b =>
                {
                    b.Navigation("ValidationEmos");
                });

            modelBuilder.Entity("backend.Models.TypeEmos", b =>
                {
                    b.Navigation("Emos");
                });

            modelBuilder.Entity("backend.Models.TypeValidationEmos", b =>
                {
                    b.Navigation("ValidationEmos");
                });

            modelBuilder.Entity("backend.Models.TypeValidationFi", b =>
                {
                    b.Navigation("ValidationFis");
                });

            modelBuilder.Entity("backend.Models.Unite", b =>
                {
                    b.Navigation("Habilitations");
                });
#pragma warning restore 612, 618
        }
    }
}
